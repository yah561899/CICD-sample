---
- name: Setup Kubernetes tools and applications in Minikube Linux environment
  hosts: localhost
  become: yes
  collections:
    - kubernetes.core
  vars:
    user_name: "{{ lookup('env','USER') }}"
    kubeconfig_path: "/home/{{ user_name }}/.kube/config"
    minikube_driver: docker
    kubectl_version: v1.33.1
    helm_version: v3.18.2

  vars_prompt:
    - name: cluster_name
      prompt: "Enter your targeted cluster name"
      private: false
    
    - name: all_tools_password
      prompt: "Enter new all tools admin password"
      private: false

  pre_tasks:
    - name: Cluster Name
      debug:
        msg: "Cluster name: {{ cluster_name }}"

    - name: Kubernetes Path
      debug:
        msg: "Kubernetes path: {{ kubeconfig_path }}"

    - name: Install python3-kubernetes
      apt:
        name:
          - python3-kubernetes
        state: present
        update_cache: yes

    - name: Check if Minikube is installed
      stat:
        path: /usr/local/bin/minikube
      register: minikube_check
      become: false

    - name: Download Minikube binary if not present
      get_url:
        url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        dest: /usr/local/bin/minikube
        mode: '0755'
      when: not minikube_check.stat.exists

    - name: Check if Minikube cluster is already running
      command: minikube status -p {{ cluster_name }}
      register: minikube_status
      ignore_errors: true
      changed_when: false
      become: false

    - name: Start Minikube cluster if not running
      command: minikube start -p {{ cluster_name }} --driver={{ minikube_driver }} --force
      when: "'Running' not in minikube_status.stdout"
      become: false

  tasks:
    - name: Install APT dependencies
      apt:
        name:
          - curl
        state: present
        update_cache: yes

    - name: Check if kubectl binary exists
      stat:
        path: /usr/local/bin/kubectl
      register: kubectl_check
      become: false

    - name: Download kubectl binary if not present
      get_url:
        url: https://dl.k8s.io/release/{{ kubectl_version }}/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        mode: '0755'
        force: no
      when: not kubectl_check.stat.exists

    - name: Check if Helm archive exists
      stat:
        path: /tmp/helm.tar.gz
      register: helm_archive
      become: false

    - name: Download Helm archive if not present
      get_url:
        url: https://get.helm.sh/helm-{{ helm_version }}-linux-amd64.tar.gz
        dest: /tmp/helm.tar.gz
        mode: '0644'
        force: no
      when: not helm_archive.stat.exists

    - name: Extract Helm
      unarchive:
        src: /tmp/helm.tar.gz
        dest: /tmp
        remote_src: yes

    - name: Check if Helm binary exists
      stat:
        path: /usr/local/bin/helm
      register: helm_binary_check
      become: false

    - name: Install Helm binary if not present
      copy:
        remote_src: yes
        src: /tmp/linux-amd64/helm
        dest: /usr/local/bin/helm
        mode: '0755'
        force: no
      when: not helm_binary_check.stat.exists

    - name: Add Helm repositories
      shell: |
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo add jenkins https://charts.jenkins.io
        helm repo add sonatype https://sonatype.github.io/helm3-charts
      args:
        creates: ~/.cache/helm/repository/repositories.yaml

    - name: Update Helm repositories
      command: helm repo update

    - name: Check if ArgoCD server is already installed
      command: kubectl --kubeconfig={{ kubeconfig_path }} get deployment argocd-server -n argocd
      register: argocd_server_status
      ignore_errors: true
      changed_when: false
      become: false

    - name: Create namespace for ArgoCD
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Namespace
        name: argocd
        state: present

    - name: Install ArgoCD server if not present
      shell: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      when: argocd_server_status.rc != 0
      become: false

    - name: Check if ArgoCD CLI is installed
      stat:
        path: /usr/local/bin/argocd
      register: argocd_cli
      become: false

    - name: Download ArgoCD CLI binary if not present
      get_url:
        url: https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        dest: /usr/local/bin/argocd
        mode: '0755'
      when: not argocd_cli.stat.exists

    - name: Create namespace for Jenkins
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Namespace
        name: jenkins
        state: present

    - name: Check if Jenkins is already deployed
      command: kubectl --kubeconfig={{ kubeconfig_path }} get deployment jenkins -n jenkins
      register: jenkins_status
      ignore_errors: true
      changed_when: false
      become: false

    - name: Deploy Jenkins via Helm if not present
      vars:
        jenkins_username: admin
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        name: jenkins
        chart_ref: jenkins/jenkins
        namespace: jenkins
        create_namespace: false
        values:
          controller:
            admin:
              username: "{{ jenkins_username }}"
              password: "{{ all_tools_password }}"
      when: jenkins_status.rc != 0

    - name: Create namespace for Nexus
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Namespace
        name: nexus
        state: present

    - name: Check if Nexus is already deployed
      command: kubectl --kubeconfig={{ kubeconfig_path }} get deployment nexus -n nexus
      register: nexus_status
      ignore_errors: true
      changed_when: false
      become: false

    - name: Deploy Nexus Repository Manager via Helm if not present
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        name: nexus
        chart_ref: sonatype/nexus-repository-manager
        namespace: nexus
        create_namespace: false
        set_values:
          - nexus.env[0].name: NEXUS_SECURITY_INITIAL_PASSWORD
          - nexus.env[0].value: "{{ all_tools_password }}"
          - nexus.env[1].name: NEXUS_SECURITY_RANDOMPASSWORD
          - nexus.env[1].value: "false"
      when: nexus_status.rc != 0

    - name: Create namespace for Redis
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Namespace
        name: redis
        state: present

    - name: Check if Redis is already deployed
      command: kubectl --kubeconfig={{ kubeconfig_path }} get statefulset redis-master -n redis
      register: redis_status
      ignore_errors: true
      changed_when: false
      become: false

    - name: Deploy Redis via Helm if not present
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        name: redis
        chart_ref: bitnami/redis
        namespace: redis
        create_namespace: false
        set_values:
          - auth.password: "{{ all_tools_password }}"
      when: redis_status.rc != 0

    - name: Create namespace for RabbitMQ
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Namespace
        name: rabbitmq
        state: present

    - name: Check if RabbitMQ is already deployed
      command: kubectl --kubeconfig={{ kubeconfig_path }} get statefulset rabbitmq -n rabbitmq
      register: rabbitmq_status
      ignore_errors: true
      changed_when: false
      become: false

    - name: Deploy RabbitMQ via Helm if not present
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        name: rabbitmq
        chart_ref: bitnami/rabbitmq
        namespace: rabbitmq
        create_namespace: false
        set_values:
          - auth.password: "{{ all_tools_password }}"
          - updatePassword: true
      when: rabbitmq_status.rc != 0
